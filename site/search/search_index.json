{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dokumentation von Andr\u00e9 Kloster","title":"Home"},{"location":"#dokumentation-von-andre-kloster","text":"","title":"Dokumentation von Andr\u00e9 Kloster"},{"location":"dns/","text":"Lokaler DNS Server mit Bind9 und Ansible Ziel Mit Hilfe von Ansible m\u00f6chten wir die Einrichtung und Wartung eines lokalen Bind9-DNS automatisieren und somit den administrativen Aufwand vereinfachen. Besonders im HomeLab ist ein lokaler DNS besonders hilfreich und erm\u00f6glicht eine bessere Kommunikation zwischen internen Diensten im Netzwerk. Am Ende dieser Anleitung wird es m\u00f6glich sein mit nur einer YAML Datei alle notwendigen DNS Records zu verwalten. Voraussetzungen Zur Einrichtung des DNS wird ein Server mit Debian ben\u00f6tigt. Zus\u00e4tzlich brauchen wir eine Maschine auf der Ansible installiert ist. Beide Rechner m\u00fcssen sich \u00fcber ein Netzwerk erreichen k\u00f6nnen und wir m\u00fcssen aufpassen, dass der Port 53 (TCP/UDP) nicht von einer Firewall blockiert wird. Abschlie\u00dfend erfinden wir eine Domain, die zuk\u00fcnftig in unserem Netzwerk gelten soll. # Domain test.local # IPv4 CIDR 10.192.1.0/24 # DNS Server - Hostname: dns.test.local - IP: 10.192.1.1 # Ansible - ansible.test.local - IP: 10.192.1.2 Vorbereitung: Ansible Playbook und Role Zun\u00e4chst stellen wir sicher, dass der Ansible Rechner und der DNS Server sich gegenseitig im Netzwerk erreichen k\u00f6nnen. # Folgenden Befehl f\u00fcr wir auf dem Ansible Rechner aus ping 10 .192.1.1 Anschlie\u00dfend klonen wir das Git Repository, welches f\u00fcr diese Anleitung vorbereitet wurde. git clone https://github.com/andrekloster/boilerplate.git In diesem Repository befindet sich das Verzeichnis bind9 , welches eine Vorlage f\u00fcr unsere Ansible Role zur Verf\u00fcgung stellt. boilerplate \u251c\u2500\u2500 README.md \u2514\u2500\u2500 bind9 \u251c\u2500\u2500 dns.yaml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles \u2514\u2500\u2500 dns \u251c\u2500\u2500 handlers \u2502 \u2514\u2500\u2500 main.yaml \u251c\u2500\u2500 tasks \u2502 \u2514\u2500\u2500 main.yaml \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 etc \u2502 \u2514\u2500\u2500 bind \u2502 \u251c\u2500\u2500 named.conf.local \u2502 \u251c\u2500\u2500 named.conf.options \u2502 \u2514\u2500\u2500 zones \u2502 \u251c\u2500\u2500 1.192.10.in-addr.arpa \u2502 \u2514\u2500\u2500 test.local \u2514\u2500\u2500 vars \u2514\u2500\u2500 main.yaml Stammverzeichnis dns.yaml --- - hosts : dns become : true roles : - dns Das ist unser Ansible Playbook. Dieses Playbook f\u00fchrt mit privilegierte Rechten auf dem DNS Server unsere Ansible dns role aus. inventory [dns] 10.192.1.1 [all:children] dns [all:vars] ansible_python_interpreter = /usr/bin/python3 In der inventory Datei definieren wir eine dns-Gruppe und tragen dort die IP vom DNS-Server ein. Diese Datei vereinfacht die Durchf\u00fchrung vom Playbook. roles/dns Verzeichnis handlers/main.yaml --- # handlers file for Bind setup - name : restart bind service : name : bind9 state : restarted Dieser Handler kann in einem Ansible Playbook aufgerufen werden, um den bind9 Daemon neu zu starten. tasks/main.yaml --- - include_vars : vars/main.yaml - name : Install bind9 apt : pkg : - bind9 update_cache : true - name : copy named.conf.local template : src : templates/etc/bind/named.conf.local dest : /etc/bind/named.conf.local owner : root group : bind mode : '0644' - name : copy named.conf.options template : src : templates/etc/bind/named.conf.options dest : /etc/bind/named.conf.options owner : root group : bind mode : '0644' - name : create zones directory ansible.builtin.file : state : directory path : /etc/bind/zones owner : root group : bind mode : '0750' - name : create bind logs directory ansible.builtin.file : state : directory path : /var/log/named owner : bind group : bind mode : '0750' - name : modify forward zone template : src : templates/etc/bind/zones/{{ item }} dest : /etc/bind/zones/{{ item }} owner : root group : bind mode : 0640 loop : - 'test.local' - '1.192.10.in-addr.arpa' notify : restart bind Hier wird das bind9 Paket installiert, sowie alle notwendigen Verzeichnisse und Konfigurationen mit den richtigen Berechtigungen hinterlegt. templates/etc/bind/named.conf.local {% for zone in zones.keys () %} zone \" {{ zone }} \" { type master; file \"/etc/bind/zones/ {{ zone }} \"; }; {% endfor %} In diesem bind Konfigurationstemplate werden mit Hilfe einer for-Schleife alle DNS-Zonen angegeben. templates/etc/bind/named.conf.local options { directory \"/var/cache/bind\"; forwarders { 1.1.1.1; }; listen-on port 53 { 127.0.0.1; 10.192.1.1; }; allow-query { 127.0.0.1; ::1; 10.0.0.0/8; }; #allow-transfer { # 10.172.1.1; #}; #also-notify { # 10.172.1.1; #}; allow-update-forwarding { none; }; auth-nxdomain no; dnssec-validation auto; }; logging { channel simple_log { file \"/var/log/named/bind.log\" versions 3 size 3m; severity notice; print-time yes; print-severity yes; print-category yes; }; category default { simple_log; default_syslog; }; }; In dieser Datei wird der bind9 Daemon konfiguriert. Hier wird angegeben, welchen Forwarder der DNS Server benutzt, auf welchem Socket der Dienst l\u00e4uft und aus welchen Netzwerkbereichen die DNS-Queries kommen d\u00fcrfen. Die Abschnitte allow-transfer und also-notify sind erstmal auskommentiert. Diese werden bei einem Master-Slave Setup ben\u00f6tigt, welcher im Kapitel Extra erkl\u00e4rt wird. templates/etc/bind/zones/test.local $TTL 10m @ IN SOA dns.test.local. info.dns.test.local. ( {% for serial in zones [ 'test.local' ][ 'serial' ] %} {{ serial }} ; serial {% endfor %} 3h ; refresh 10m ; retry 7d ; expire 10m ; TTL ) @ IN NS dns.test.local. {% for hostname , ip in zones [ 'test.local' ][ 'records' ][ 'a' ] .items () %} {{ hostname }} IN A {{ ip [ 0 ] }} {% endfor %} {% for cname , destination in zones [ 'test.local' ][ 'records' ][ 'cname' ] .items () %} {{ cname }} IN CNAME {{ destination [ 0 ] }} {% endfor %} Das ist unser Template f\u00fcr die DNS-Zone. Darin verwalten wir alle DNS Records mit der Zuordnung Domain -> IP. templates/etc/bind/zones/test.local $TTL 60 @ IN SOA dns.test.local. info.dns.test.local. ( {% for serial in zones [ '1.192.10.in-addr.arpa' ][ 'serial' ] %} {{ serial }} ; serial {% endfor %} 3h ; refresh 10m ; retry 7d ; expire 10m ; TTL ) @ IN NS dns.test.local. {% for hostname , ip_suffix in zones [ '1.192.10.in-addr.arpa' ][ 'records' ][ 'a' ] .items () %} {{ ip_suffix [ 0 ] }} IN PTR {{ hostname }} .test.local. {% endfor %} Das ist unser Template f\u00fcr die DNS R\u00fcckw\u00e4rtsaufl\u00f6sung. Darin verwalten wir alle DNS Records mit der Zuordnung IP -> Domain. vars/main.yaml --- zones : domus.local : serial : [ \"2022090201\" ] records : a : dns : [ \"10.192.1.1\" ] ansible : [ \"10.192.1.2\" ] cname : test-cname : [ \"dns\" ] 1.42.10.in-addr.arpa : serial : [ \"2022090201\" ] records : a : dns : [ \"1\" ] ansible : [ \"2\" ] Diese YAML ist die wichtigste Konfigurationsdatei. Alle DNS Records werden ausschlie\u00dflich hier definiert. Ansible gibt somit den Varibalen innerhalb der Templates ihre Werte. Durchf\u00fchrung Extra","title":"DNS"},{"location":"dns/#lokaler-dns-server-mit-bind9-und-ansible","text":"","title":"Lokaler DNS Server mit Bind9 und Ansible"},{"location":"dns/#ziel","text":"Mit Hilfe von Ansible m\u00f6chten wir die Einrichtung und Wartung eines lokalen Bind9-DNS automatisieren und somit den administrativen Aufwand vereinfachen. Besonders im HomeLab ist ein lokaler DNS besonders hilfreich und erm\u00f6glicht eine bessere Kommunikation zwischen internen Diensten im Netzwerk. Am Ende dieser Anleitung wird es m\u00f6glich sein mit nur einer YAML Datei alle notwendigen DNS Records zu verwalten.","title":"Ziel"},{"location":"dns/#voraussetzungen","text":"Zur Einrichtung des DNS wird ein Server mit Debian ben\u00f6tigt. Zus\u00e4tzlich brauchen wir eine Maschine auf der Ansible installiert ist. Beide Rechner m\u00fcssen sich \u00fcber ein Netzwerk erreichen k\u00f6nnen und wir m\u00fcssen aufpassen, dass der Port 53 (TCP/UDP) nicht von einer Firewall blockiert wird. Abschlie\u00dfend erfinden wir eine Domain, die zuk\u00fcnftig in unserem Netzwerk gelten soll. # Domain test.local # IPv4 CIDR 10.192.1.0/24 # DNS Server - Hostname: dns.test.local - IP: 10.192.1.1 # Ansible - ansible.test.local - IP: 10.192.1.2","title":"Voraussetzungen"},{"location":"dns/#vorbereitung-ansible-playbook-und-role","text":"Zun\u00e4chst stellen wir sicher, dass der Ansible Rechner und der DNS Server sich gegenseitig im Netzwerk erreichen k\u00f6nnen. # Folgenden Befehl f\u00fcr wir auf dem Ansible Rechner aus ping 10 .192.1.1 Anschlie\u00dfend klonen wir das Git Repository, welches f\u00fcr diese Anleitung vorbereitet wurde. git clone https://github.com/andrekloster/boilerplate.git In diesem Repository befindet sich das Verzeichnis bind9 , welches eine Vorlage f\u00fcr unsere Ansible Role zur Verf\u00fcgung stellt. boilerplate \u251c\u2500\u2500 README.md \u2514\u2500\u2500 bind9 \u251c\u2500\u2500 dns.yaml \u251c\u2500\u2500 inventory \u2514\u2500\u2500 roles \u2514\u2500\u2500 dns \u251c\u2500\u2500 handlers \u2502 \u2514\u2500\u2500 main.yaml \u251c\u2500\u2500 tasks \u2502 \u2514\u2500\u2500 main.yaml \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 etc \u2502 \u2514\u2500\u2500 bind \u2502 \u251c\u2500\u2500 named.conf.local \u2502 \u251c\u2500\u2500 named.conf.options \u2502 \u2514\u2500\u2500 zones \u2502 \u251c\u2500\u2500 1.192.10.in-addr.arpa \u2502 \u2514\u2500\u2500 test.local \u2514\u2500\u2500 vars \u2514\u2500\u2500 main.yaml","title":"Vorbereitung: Ansible Playbook und Role"},{"location":"dns/#stammverzeichnis","text":"dns.yaml --- - hosts : dns become : true roles : - dns Das ist unser Ansible Playbook. Dieses Playbook f\u00fchrt mit privilegierte Rechten auf dem DNS Server unsere Ansible dns role aus. inventory [dns] 10.192.1.1 [all:children] dns [all:vars] ansible_python_interpreter = /usr/bin/python3 In der inventory Datei definieren wir eine dns-Gruppe und tragen dort die IP vom DNS-Server ein. Diese Datei vereinfacht die Durchf\u00fchrung vom Playbook.","title":"Stammverzeichnis"},{"location":"dns/#rolesdns-verzeichnis","text":"handlers/main.yaml --- # handlers file for Bind setup - name : restart bind service : name : bind9 state : restarted Dieser Handler kann in einem Ansible Playbook aufgerufen werden, um den bind9 Daemon neu zu starten. tasks/main.yaml --- - include_vars : vars/main.yaml - name : Install bind9 apt : pkg : - bind9 update_cache : true - name : copy named.conf.local template : src : templates/etc/bind/named.conf.local dest : /etc/bind/named.conf.local owner : root group : bind mode : '0644' - name : copy named.conf.options template : src : templates/etc/bind/named.conf.options dest : /etc/bind/named.conf.options owner : root group : bind mode : '0644' - name : create zones directory ansible.builtin.file : state : directory path : /etc/bind/zones owner : root group : bind mode : '0750' - name : create bind logs directory ansible.builtin.file : state : directory path : /var/log/named owner : bind group : bind mode : '0750' - name : modify forward zone template : src : templates/etc/bind/zones/{{ item }} dest : /etc/bind/zones/{{ item }} owner : root group : bind mode : 0640 loop : - 'test.local' - '1.192.10.in-addr.arpa' notify : restart bind Hier wird das bind9 Paket installiert, sowie alle notwendigen Verzeichnisse und Konfigurationen mit den richtigen Berechtigungen hinterlegt. templates/etc/bind/named.conf.local {% for zone in zones.keys () %} zone \" {{ zone }} \" { type master; file \"/etc/bind/zones/ {{ zone }} \"; }; {% endfor %} In diesem bind Konfigurationstemplate werden mit Hilfe einer for-Schleife alle DNS-Zonen angegeben. templates/etc/bind/named.conf.local options { directory \"/var/cache/bind\"; forwarders { 1.1.1.1; }; listen-on port 53 { 127.0.0.1; 10.192.1.1; }; allow-query { 127.0.0.1; ::1; 10.0.0.0/8; }; #allow-transfer { # 10.172.1.1; #}; #also-notify { # 10.172.1.1; #}; allow-update-forwarding { none; }; auth-nxdomain no; dnssec-validation auto; }; logging { channel simple_log { file \"/var/log/named/bind.log\" versions 3 size 3m; severity notice; print-time yes; print-severity yes; print-category yes; }; category default { simple_log; default_syslog; }; }; In dieser Datei wird der bind9 Daemon konfiguriert. Hier wird angegeben, welchen Forwarder der DNS Server benutzt, auf welchem Socket der Dienst l\u00e4uft und aus welchen Netzwerkbereichen die DNS-Queries kommen d\u00fcrfen. Die Abschnitte allow-transfer und also-notify sind erstmal auskommentiert. Diese werden bei einem Master-Slave Setup ben\u00f6tigt, welcher im Kapitel Extra erkl\u00e4rt wird. templates/etc/bind/zones/test.local $TTL 10m @ IN SOA dns.test.local. info.dns.test.local. ( {% for serial in zones [ 'test.local' ][ 'serial' ] %} {{ serial }} ; serial {% endfor %} 3h ; refresh 10m ; retry 7d ; expire 10m ; TTL ) @ IN NS dns.test.local. {% for hostname , ip in zones [ 'test.local' ][ 'records' ][ 'a' ] .items () %} {{ hostname }} IN A {{ ip [ 0 ] }} {% endfor %} {% for cname , destination in zones [ 'test.local' ][ 'records' ][ 'cname' ] .items () %} {{ cname }} IN CNAME {{ destination [ 0 ] }} {% endfor %} Das ist unser Template f\u00fcr die DNS-Zone. Darin verwalten wir alle DNS Records mit der Zuordnung Domain -> IP. templates/etc/bind/zones/test.local $TTL 60 @ IN SOA dns.test.local. info.dns.test.local. ( {% for serial in zones [ '1.192.10.in-addr.arpa' ][ 'serial' ] %} {{ serial }} ; serial {% endfor %} 3h ; refresh 10m ; retry 7d ; expire 10m ; TTL ) @ IN NS dns.test.local. {% for hostname , ip_suffix in zones [ '1.192.10.in-addr.arpa' ][ 'records' ][ 'a' ] .items () %} {{ ip_suffix [ 0 ] }} IN PTR {{ hostname }} .test.local. {% endfor %} Das ist unser Template f\u00fcr die DNS R\u00fcckw\u00e4rtsaufl\u00f6sung. Darin verwalten wir alle DNS Records mit der Zuordnung IP -> Domain. vars/main.yaml --- zones : domus.local : serial : [ \"2022090201\" ] records : a : dns : [ \"10.192.1.1\" ] ansible : [ \"10.192.1.2\" ] cname : test-cname : [ \"dns\" ] 1.42.10.in-addr.arpa : serial : [ \"2022090201\" ] records : a : dns : [ \"1\" ] ansible : [ \"2\" ] Diese YAML ist die wichtigste Konfigurationsdatei. Alle DNS Records werden ausschlie\u00dflich hier definiert. Ansible gibt somit den Varibalen innerhalb der Templates ihre Werte.","title":"roles/dns Verzeichnis"},{"location":"dns/#durchfuhrung","text":"","title":"Durchf\u00fchrung"},{"location":"dns/#extra","text":"","title":"Extra"}]}